import pygame
import numpy as np
from dearpygui.dearpygui import *
# from dearpygui.core import *
# from dearpygui.simple import *
import threading


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
GRID_W, GRID_H = 100, 100
SCALE = 4  # –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 4√ó4
DAMPING = 0.99
WIDTH, HEIGHT = GRID_W * SCALE, GRID_H * SCALE
AMPLITUDE = 255                    # –∞–º–ø–ª–∏—Ç—É–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
DIRECTION_FLIP_PROB = 0.01   # —à–∞–Ω—Å —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
SPEED_RANGE = (0.8, 1.2)     # min/max –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏

# –¶–≤–µ—Ç–∞
BASE_COLOR = (0, 0, 0)              # —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
WAVE_COLOR = (0.5, 0.7, 1.0)        # –º–Ω–æ–∂–∏—Ç–µ–ª–∏ RGB



# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã GUI –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–≥–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö
gui_values = {
    "DAMPING": DAMPING,
    "AMPLITUDE": AMPLITUDE,
    "DIRECTION_FLIP_PROB": DIRECTION_FLIP_PROB,
    "SPEED_MIN": SPEED_RANGE[0],
    "SPEED_MAX": SPEED_RANGE[1]
}

def update_values(sender, data):
    global DAMPING, AMPLITUDE, DIRECTION_FLIP_PROB, SPEED_RANGE, speed_map

    DAMPING = get_value("–ó–∞—Ç—É—Ö–∞–Ω–∏–µ (DAMPING)")
    AMPLITUDE = get_value("–ê–º–ø–ª–∏—Ç—É–¥–∞ –∫–∞–ø–ª–∏")
    DIRECTION_FLIP_PROB = get_value("–®–∞–Ω—Å –∏–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (%)")
    speed_min = get_value("–°–∫–æ—Ä–æ—Å—Ç—å MIN")
    speed_max = get_value("–°–∫–æ—Ä–æ—Å—Ç—å MAX")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –∫–∞—Ä—Ç—É —Å–∫–æ—Ä–æ—Å—Ç–µ–π
    SPEED_RANGE = (speed_min, speed_max)
    speed_map[:] = np.random.uniform(*SPEED_RANGE, size=(GRID_H, GRID_W))

create_context()
create_viewport(title='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–ª–Ω—ã', width=600, height=300)

with window(label="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–ª–Ω—ã"):#, width=350, height=300):
    add_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏:")

    add_slider_float(label="–ó–∞—Ç—É—Ö–∞–Ω–∏–µ (DAMPING)", min_value=0.90, max_value=1.0,
                     default_value=DAMPING, callback=update_values,
                     user_data="DAMPING")
    # bind_item_to_variable("–ó–∞—Ç—É—Ö–∞–Ω–∏–µ (DAMPING)", gui_values, "DAMPING")

    add_slider_float(label="–ê–º–ø–ª–∏—Ç—É–¥–∞ –∫–∞–ø–ª–∏", min_value=10, max_value=255,
                     default_value=AMPLITUDE, callback=update_values,
                     user_data="AMPLITUDE")
    # bind_item_to_variable("–ê–º–ø–ª–∏—Ç—É–¥–∞ –∫–∞–ø–ª–∏", gui_values, "AMPLITUDE")

    add_slider_float(label="–®–∞–Ω—Å –∏–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (%)", min_value=0.0, max_value=0.2,
                     default_value=DIRECTION_FLIP_PROB, callback=update_values,
                     user_data="DIRECTION_FLIP_PROB")
    # bind_item_to_variable("–®–∞–Ω—Å –∏–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (%)", gui_values, "DIRECTION_FLIP_PROB")

    add_slider_float(label="–°–∫–æ—Ä–æ—Å—Ç—å MIN", min_value=0.1, max_value=2.0,
                     default_value=SPEED_RANGE[0], callback=update_values,
                     user_data="SPEED_MIN")
    # bind_item_to_variable("–°–∫–æ—Ä–æ—Å—Ç—å MIN", gui_values, "SPEED_MIN")

    add_slider_float(label="–°–∫–æ—Ä–æ—Å—Ç—å MAX", min_value=0.1, max_value=2.0,
                     default_value=SPEED_RANGE[1], callback=update_values,
                     user_data="SPEED_MAX")
    # bind_item_to_variable("–°–∫–æ—Ä–æ—Å—Ç—å MAX", gui_values, "SPEED_MAX")



# def run_gui():
setup_dearpygui()
show_viewport()
start_dearpygui()
destroy_context()
# threading.Thread(target=run_gui, daemon=True).start()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("2D Water Ripple")

# –í–æ–ª–Ω–æ–≤—ã–µ –±—É—Ñ–µ—Ä—ã
prev = np.zeros((GRID_H, GRID_W), dtype=np.float32)
curr = np.zeros((GRID_H, GRID_W), dtype=np.float32)


# speed_map = np.random.uniform(0.8, 1.2, size=(GRID_H, GRID_W))
speed_map = np.random.uniform(*SPEED_RANGE, size=(GRID_H, GRID_W))
direction_map = np.random.choice([-1, 1], size=(GRID_H, GRID_W))


clock = pygame.time.Clock()

font = pygame.font.SysFont("Arial", 18)

running = True
while running:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif pygame.mouse.get_pressed()[0]:  # –õ–ö–ú
            mx, my = pygame.mouse.get_pos()
            if 1 < mx < WIDTH - 1 and 1 < my < HEIGHT - 1:
                # curr[my, mx] = 255  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ Y, –ø–æ—Ç–æ–º X
                grid_x = mx // SCALE
                grid_y = my // SCALE
                if 1 < grid_x < GRID_W - 1 and 1 < grid_y < GRID_H - 1:
                    curr[grid_y, grid_x] = AMPLITUDE

    # –†–∞—Å—á—ë—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # next_state = (
    #     (np.roll(curr, 1, axis=0) + np.roll(curr, -1, axis=0) +
    #      np.roll(curr, 1, axis=1) + np.roll(curr, -1, axis=1)) / 2
    #     - prev
    # ) * DAMPING
    avg = (
                  np.roll(curr, 1, axis=0) + np.roll(curr, -1, axis=0) +
                  np.roll(curr, 1, axis=1) + np.roll(curr, -1, axis=1)
          ) / 2

    next_state = (avg - prev) * DAMPING
    # next_state *= speed_map * direction_map

    # –û—Ç—Å–∫–æ–∫ –æ—Ç —Å—Ç–µ–Ω (–≥—Ä–∞–Ω–∏—Ü)
    next_state[0, :] = 0
    next_state[-1, :] = 0
    next_state[:, 0] = 0
    next_state[:, -1] = 0

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤
    prev, curr = curr, next_state

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É
    pixels = np.clip(curr, 0, 255).astype(np.uint8)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ üåä
    colored = np.zeros((GRID_H, GRID_W, 3), dtype=np.uint8)
    colored[..., 0] = np.clip(pixels * WAVE_COLOR[0], 0, 255)
    colored[..., 1] = np.clip(pixels * WAVE_COLOR[1], 0, 255)
    colored[..., 2] = np.clip(pixels * WAVE_COLOR[2], 0, 255)

    # 1% —è—á–µ–µ–∫ –º–µ–Ω—è—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    # flip_mask = np.random.rand(GRID_H, GRID_W) < 0.01
    # flip_mask = np.random.rand(GRID_H, GRID_W) < DIRECTION_FLIP_PROB

    # direction_map[flip_mask] *= -1

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–¥—Ä–∞
    surface = pygame.surfarray.make_surface(colored)
    surface = pygame.transform.flip(surface, False,  True)  # –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–æ Y (–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
    surface = pygame.transform.scale(surface, (WIDTH, HEIGHT))

    screen.blit(pygame.transform.rotate(surface, -90), (0, 0))

    # –í—ã–≤–æ–¥ FPS –≤ —É–≥–æ–ª
    fps = int(clock.get_fps())
    fps_text = font.render(f"FPS: {fps}", True, (255, 255, 255))
    text_rect = fps_text.get_rect(bottomright=(WIDTH - 10, HEIGHT - 10))
    screen.blit(fps_text, text_rect)

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
